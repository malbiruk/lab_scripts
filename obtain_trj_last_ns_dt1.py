'''
This script generates new trajectories with length 1 ns and dt=1 ps
(from 199 ns to 200) of all systems specified in EXPERIMENTS
'''

import os
import subprocess
import sys
from pathlib import Path

from modules.general import flatten, realtime_output, duration
from modules.constants import PATH, EXPERIMENTS
from modules import tg_bot


def run_and_send_error(cmd: str, msg: str):
    '''
    wrapper to run shell commands and send telegram message
    with stderr if error occures

    cmd - command (as string)
    msg - message to send if error (will be bold and followed by stderr output)
    '''
    try:
        subprocess.run(cmd, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        res = subprocess.run(cmd, shell=True, capture_output=True)
        tg_bot.send_message('*' + msg + ':*\n`' +
                            res.stderr.decode("utf-8") + '`', silent=True)
        print(e)


def create_mdp_for_last_ns(syst: str):
    '''
    creates mdp file neccesarry to create simulation of last ns
    '''
    with open(PATH / syst / 'md.mdp', encoding='utf-8') as inp, \
            open(PATH / syst / 'md_last_ns.mdp', 'w', encoding='utf-8') as out:
        for c, line in enumerate(inp):
            # if c == 0:
            #     line = 'include=-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs '
            #     '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/forcefields/AA '
            #     '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/lipids/top/AA/'
            #     'amber14sb.ff-lip'

            replacement_dict = {'nsteps': ('100000000', '500000'),
                                'tinit': ('0', '99500000'),
                                'nstxtcout': ('5000', '500'),
                                'constraints': ('all-bonds', 'h-bonds')}

            for linestart, (replace_from, replace_to) in replacement_dict.items():
                if line.startswith(linestart):
                    line = line.replace(replace_from, replace_to)
            if line.startswith('constraint-algorithm'):
                unconstrained_start_line = 'continuation' + ' ' * (
                    25 - len('continuation')) + '= yes\n'
                line = line + unconstrained_start_line

            out.write(line)


def obtain_part_of_trr(syst: str, b: int, e: int, dt: int):
    '''
    generates part of trajectory in .trr format

    b -- start frame
    e -- end frame
    dt -- delta t between each frames (in ps)
    '''
    md_dir = str(PATH / syst / 'md')
    cmd = ['. /usr/local/gromacs-2020.4/bin/GMXRC && ',
           f'echo 0 | gmx trjconv -s {md_dir}/md.tpr',
           f'-f {md_dir}/md.trr',
           f'-b {b} -e {e} -dt {dt}',
           f'-o {md_dir}/md_{b}-{e}-{dt}.trr',
           '-vel -force']
    msg = f'Couldn\'t obtain part (b={b}, e={e}, dt={dt}) of {syst} trajectory'
    run_and_send_error(' '.join(cmd), msg)


def create_last_ns_tpr(syst: str):
    '''
    creates tpr file neccesarry to create simulation of last ns
    (using a .trr file generated by obtain_frame_from_trj())
    '''
    if Path(PATH / syst / 'md' / ' last_ns.tpr').is_file():
        return

    if not Path(PATH / syst / 'md' / ' md_0-199000-20.trr').is_file():
        obtain_part_of_trr(syst, 0, 199000, 20)

    cmd = ['. /usr/local/gromacs-2020.4/bin/GMXRC && ',
           f'gmx grompp -f {str(PATH / syst)}/md_last_ns.mdp',
           f'-c {str(PATH / syst)}/pr4/pr4.gro',
           f'-r {str(PATH / syst)}/pr4/pr4.gro',
           f'-p {str(PATH / syst)}/indata/system.top',
           f'-n {str(PATH / syst)}/indata/grps.ndx',
           f'-t {str(PATH / syst)}/md/md_0-199000-20.trr',
           # f'-e {str(PATH / syst)}/md/md.edr',
           f'-o {str(PATH / syst)}/md/last_ns.tpr -v']

    msg = f'Couldn\'t create tpr file for system {syst}'
    run_and_send_error(' '.join(cmd), msg)


def run_md_last_ns(syst: str):
    '''
    start simulation
    '''
    os.chdir(PATH / syst / 'md')
    cmd = ['. /usr/local/gromacs-2020.4/bin/GMXRC && ',
           f'gmx mdrun -deffnm last_ns -v']
    msg = f'{syst} last ns md failed'
    run_and_send_error(' '.join(cmd), msg)


@ duration
def main():
    '''
    generates new trajectories with length 1 ns and dt=1 ps (from 199 ns to 200)
    of all systems specified in EXPERIMENTS
    '''
    systems = flatten([(i, i + '_chol10', i + '_chol30', i + '_chol50')
                       for i in flatten(EXPERIMENTS.values())])
    tg_bot.send_message(
        'obtaining last ns trajectories from systems started...')
    c = 0
    for syst in systems[::-1]:
        create_mdp_for_last_ns(syst)
        c += 1
        tg_bot.send_message(
            f'generating .tpr for `{syst}` ({c}/{len(systems)})...')
        create_last_ns_tpr(syst)
        tg_bot.send_message(
            f'simulating 1 ns trajectory for `{syst}` ({c}/{len(systems)})...')
        run_md_last_ns(syst)
    tg_bot.send_message('obtaining last ns trajectories from systems done.')


if __name__ == '__main__':
    main()
