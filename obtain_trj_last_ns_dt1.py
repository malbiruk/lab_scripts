'''
This script generates new trajectories with length 1 ns and dt=1 ps (from 199 ns to 200)
of all systems specified in EXPERIMENTS
'''


import subprocess
import sys

from modules.general import flatten, realtime_output
from modules.constants import PATH, EXPERIMENTS
from modules import tg_bot


def run_and_send_error(cmd: str, msg: str):
    '''
    wrapper to run shell commands with realtime output
    and send telegram message with stderr if error occures

    cmd - command (as string)
    msg - message to send if error (will be bold and followed by stderr output)
    '''
    try:
        subprocess.check_call(cmd, shell=True)
        realtime_output(cmd)
    except subprocess.CalledProcessError as e:
        res = subprocess.run(cmd, shell=True, capture_output=True)
        tg_bot.send_message('*' + msg + ':*\n`' +
                            res.stderr.decode("utf-8") + '`', silent=True)
        print(e)


def create_mdp_for_last_ns(syst: str):
    '''
    creates mdp file neccesarry to create simulation of last ns
    '''
    with (open(PATH / syst / 'md.mdp', encoding='utf-8') as inp,
          open(PATH / syst / 'md_last_ns.mdp', 'w', encoding='utf-8') as out):
        for c, line in enumerate(inp):
            if c == 0:
                line = 'include=-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs '
                '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/forcefields/AA '
                '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/lipids/top/AA/amber14sb.ff-lip'

            if line.startswith('nsteps'):
                init_step_line = 'init-step' + ' ' * \
                    (25 - len('init-step')) + '= 99500000\n'
                line = line + init_step_line
            if line.startswith('nstxtcout'):
                line = line.replace('5000', '500')
            if line.startswith('constraint-algorithm'):
                unconstrained_start_line = 'continuation' + ' ' * (
                    25 - len('continuation')) + '= yes\n'
                line = line + unconstrained_start_line

            out.write(line)


def obtain_frame_from_trj(syst: str, frame: int = 199000):
    '''
    generates .trr frame at specified time (199000 ps by default)
    '''
    md_dir = str(PATH / syst / 'md')
    cmd = ['. /usr/local/gromacs-2020.4/bin/GMXRC && ',
           f'echo 0 | gmx trjconv -s {md_dir}/md.tpr',
           f'-f {md_dir}/md.xtc',
           f'-b {frame} -e {frame} -dt 0',
           f'-o {md_dir}/md_{frame}.trr']
    msg = f'Couldn\'t obtain {frame}th frame of {syst} trajectory'
    run_and_send_error(' '.join(cmd), msg)


def run_md_last_ns(syst: str):
    '''
    start simulation
    '''
    cmd = ['. /usr/local/gromacs-2020.4/bin/GMXRC && ',
           f'gmx mdrun -deffnm last_ns']
    msg = f'{syst} last ns md failed'
    run_and_send_error(' '.join(cmd), msg)


def create_last_ns_tpr(syst: str):
    '''
    creates tpr file neccesarry to create simulation of last ns (using a .trr file
    generated by obtain_frame_from_trj())
    '''
    if not (PATH / syst / 'md' / ' md_199000.trr').is_file():
        obtain_frame_from_trj(syst)

    cmd = ['. /usr/local/gromacs-2020.4/bin/GMXRC && ',
           f'gmx grompp -f {str(PATH / syst)}/md_last_ns.mdp',
           f'-c {str(PATH / syst)}/pr4/pr4.gro',
           f'-p {str(PATH / syst)}/indata/system.top',
           f'-n {str(PATH / syst)}/indata/grps.ndx',
           f'-t {str(PATH / syst)}/md/md_199000.trr',
           f'-e {str(PATH / syst)}/md/md.edr',
           f'-o {str(PATH / syst)}/md/last_ns.tpr']

    msg = f'Couldn\'t create tpr file for system {syst}'
    run_and_send_error(' '.join(cmd), msg)


def main():
    '''
    generates new trajectories with length 1 ns and dt=1 ps (from 199 ns to 200)
    of all systems specified in EXPERIMENTS
    '''
    systems = flatten([(i, i + '_chol10', i + '_chol30', i + '_chol50')
                       for i in flatten(EXPERIMENTS.values())])
    tg_bot.send_message(
        'obtaining last ns trajectories from systems started...')
    for syst in systems:
        create_last_ns_tpr(syst)
        run_md_last_ns(f'{syst} last ns trajectory obtained')
        tg_bot.send_message(syst)
    tg_bot.send_message('obtaining last ns trajectories from systems done.')


if __name__ == '__main__':
    main()
