'''
This script generates new trajectories with length 1 ns and dt=1 ps
(from 199 ns to 200) of all systems specified in EXPERIMENTS
'''

import argparse
import os
import subprocess
import sys
from datetime import timedelta as td

from modules import tg_bot
from modules.constants import EXPERIMENTS, PATH
from modules.general import duration, flatten, multiproc, progress_bar
from modules.tg_bot import run_or_send_error, send_message
from rich.traceback import install


def create_mdp_for_last_ns(syst: str):
    '''
    creates mdp file neccesarry to create simulation of last ns
    '''
    with open(PATH / syst / 'md.mdp', encoding='utf-8') as inp, \
            open(PATH / syst / 'md_201_ns.mdp', 'w', encoding='utf-8') as out:
        for c, line in enumerate(inp):
            if c == 0:
                line = 'include=-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs '\
                    '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/forcefields/AA '\
                    '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/forcefields/AA/amber14sb.ff '\
                    '-I/home/krylov/Progs/IBX/AMMP/src/data_copy/libs/lipids/top/AA/'\
                    'amber14sb.ff-lip\n'
            replacement_dict = {
                'nsteps': ('100000000', '100500000'),
                # 'tinit': ('0', '200001'),
                'nstxtcout': ('5000', '500')}
            # 'constraints': ('all-bonds', 'h-bonds')}

            for linestart, (replace_from, replace_to) in replacement_dict.items():
                if line.startswith(linestart):
                    line = line.replace(replace_from, replace_to)
            if line.startswith('constraint-algorithm'):
                continuation_line = 'continuation' + ' ' * (
                    25 - len('continuation')) + '= yes\n'
                line = line + continuation_line

            out.write(line)


def create_last_ns_tpr(syst: str) -> bool:
    '''
    creates tpr file neccesarry to create simulation of last ns
    (using a .trr file generated by obtain_frame_from_trj())
    '''
    tg_bot.send_message(f'generating .tpr for `{syst}`...')

    if (PATH / syst / 'md' / ' 201_ns.tpr').is_file():
        return True

    # if not (PATH / syst / 'md' / ' md_199000.trr').is_file():
    #     trr_success = obtain_part_of_trr(syst, 199000, 199000, 0)
    #     if not trr_success:
    #         return False

    cmd = ['. /usr/local/gromacs-2021.5/bin/GMXRC && ',
           f'gmx grompp -f {str(PATH / syst)}/md_201_ns.mdp',
           f'-c {str(PATH / syst)}/md/md.gro',
           f'-p {str(PATH / syst)}/indata/system.top',
           f'-n {str(PATH / syst)}/indata/grps.ndx',
           f'-t {str(PATH / syst)}/md/md.cpt',
           # f'-e {str(PATH / syst)}/md/md.edr',
           f'-o {str(PATH / syst)}/md/201_ns.tpr -v']

    msg = f'Couldn\'t create tpr file for system {syst}'
    return run_or_send_error(' '.join(cmd), msg)


def run_md_last_ns(syst: str) -> bool:
    '''
    start simulation
    '''
    tg_bot.send_message(f'simulating 1 ns trajectory for `{syst}`...')
    os.chdir(PATH / syst / 'md')
    cmd = ['. /usr/local/gromacs-2021.5/bin/GMXRC && ',
           'gmx mdrun -s 201_ns.tpr -cpi md.cpt -noappend -v']
    msg = f'{syst} last ns md failed'
    return run_or_send_error(' '.join(cmd), msg)


def reformat_trajectory(syst: str) -> bool:
    '''
    1. get part of pbcmol.xtc (0-199 ns)
    2. apply -pbc mol and change starting time to correct in last_ns.xtc
    3. trjcat trajectories from 1 and 2 to get new pbcmol.xtc
    4. rename pbcmol
    '''
    # tg_bot.send_message(f'reformatting trajectory `{syst}`...')
    os.chdir(PATH / syst / 'md')
    if (PATH / syst / 'md' / 'pbcmol_201.xtc').is_file():
        return True
    ls = os.listdir()
    try:
        traj = sorted([i for i in ls if i.startswith('traj_comp')])[-1]
    except IndexError:
        send_message(f'couldn\'t reformat trajectory for {syst}, no traj file')

    msg = f'{syst} trajectory reformatting failed'
    cmd = ['. /usr/local/gromacs-2021.5/bin/GMXRC &&',
           f'echo 0 | gmx trjconv -s 201_ns.tpr -f {traj}',
           '-pbc mol -o pbcmol_201.xtc']

    if not run_or_send_error(' '.join(cmd), msg,
                             stdout=subprocess.DEVNULL,
                             stderr=subprocess.DEVNULL):
        return False
    return True


@ duration
def main():
    '''
    generates new trajectories with length 1 ns and dt=1 ps (from 199 ns to 200)
    of all systems specified in EXPERIMENTS
    '''
    parser = argparse.ArgumentParser(
        description='This script generates new trajectories with length 1 ns and dt=1 ps '
        '(from 199 ns to 200) of all systems specified in EXPERIMENTS')
    parser.add_argument('--calculate',
                        action='store_true',
                        help='run simulations')
    parser.add_argument('--reformat',
                        action='store_true',
                        help='insert calculated part into previously calculated trajectories')
    parser.add_argument('--n_workers',
                        type=int,
                        default=8,
                        help='n of subprocesses to run during multiprocessing, default=8')
    if len(sys.argv) < 2:
        parser.print_usage()
    args = parser.parse_args()

    systems = flatten([(i, i + '_chol10', i + '_chol30', i + '_chol50')
                       for i in flatten(EXPERIMENTS.values())])

    systems = list(dict.fromkeys(systems))

    systems = ['dopc_dops50']

    if args.calculate:
        tg_bot.send_message(
            'obtaining last ns trajectories from systems started...')

        systs_with_error_md = []
        c = 0
        for syst in systems:
            c += 1
            tg_bot.send_message(f'{c}/{len(systems)}')
            create_mdp_for_last_ns(syst)
            tpr_success = create_last_ns_tpr(syst)
            if tpr_success:
                md_success = run_md_last_ns(syst)
            if not tpr_success or md_success:
                systs_with_error_md.append(syst)

        systs_with_error_md = ', '.join(systs_with_error_md)

        send_message(
            'obtaining last ns trajectories from systems done.\n'
            f'systems with errors: `{systs_with_error_md}`'
        )

    if args.reformat:
        tg_bot.send_message(
            'reformatting last ns trajectories from systems started...')
        errors = multiproc(reformat_trajectory, systems,
                           n_workers=args.n_workers, messages=True,
                           descr='reformatting trajectories')
        print(errors)
        errors = ', '.join([k[0] for k, v in errors.items() if not v])
        tg_bot.send_message(
            'reformatting trajectories from systems done.\n'
            f'systems with errors: `{errors}`'
        )

        errors = ', '.join(errors)
        send_message(f'systems with errors: `{errors}`')


if __name__ == '__main__':
    install()
    main()
